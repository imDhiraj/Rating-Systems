// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OWNER
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(60)
  email     String   @unique
  password  String   
  address   String   @db.VarChar(400)
  role      Role     @default(USER) // Default role is USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stores  Store[]
  ratings Rating[]
}

model Store {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  address   String   @db.VarChar(400)
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ratings Rating[]
}

model Rating {

  id        String   @id @default(cuid())
  storeId   String
  userId    String
  rating    Int
  comment   String? // optional
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId]) // âœ… Prevent duplicate ratings by same user for same store
}


